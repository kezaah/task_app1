* {
    margin: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}


body {
    display: block;
    flex-direction: column;
    min-height: 100vh;
    color: rgb(146, 141, 146);
    background-color: blueviolet;

}

header {
padding: 2rem 1rem;
max-width: 800px;
width: 100%;
margin: 0 auto;
}

.task_list_main{
    font-size: 3rem;
    font-style: normal;
    font-weight: 300;
    color: beige;
    margin-bottom: 1rem;
    text-align: center;
}

.new_task_form{
    display: flex;
}

input, button{
appearance: none;
border: none;
outline: none;
background: none;
}

.task_input::placeholder{
    color:rgb(188, 201, 201);
}

.task_add{
    color:beige;
    width: 100px;
    font-size: 1rem;
    font-weight: 600;
    background-color: beige;
    border-radius: 1.1rem;
    cursor: pointer;
    transition: 0.4s;
}

.task_add:hover{
    opacity: 0.8;
}

.task_add:active{
    opacity: 0.5;
}

.task_list{
    padding: 1rem;
}

.task_list > h2{
    font-size: 1.5rem;
    font-weight: 300;
    color:aquamarine;
    margin-bottom: 1rem;
}

#tasks .task {
	display: flex;
	/* The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally) */
	/* Items will have space between them */
	justify-content: space-between;
	background-color: lightgoldenrodyellow;
	padding: 1rem;
	border-radius: 1rem;
	margin-bottom: 1rem;
}

.task .content {
	flex: 1 1 0%;
}

.task .content .text {
	color: black;
	font-size: 1.125rem;
	width: 100%;
	display: block;
	transition: 0.4s;
}
/* 
.task .content .text:not(:read-only) {
	color: var(--pink);
} */

.task .actions {
	display: flex;
	margin: 0 -0.5rem;
}

.task .actions button {
	cursor: pointer;
	margin: 0 0.5rem;
	font-size: 1.125rem;
	font-weight: 700;
	text-transform: uppercase;
	transition: 0.4s;
}

.task .actions button:hover {
	opacity: 0.8;
}

.task .actions button:active {
	opacity: 0.6;
}

/* We can divide CSS selectors into five categories: */

/* Simple selectors (select elements based on name, id, class) */
/* Combinator selectors (select elements based on a specific relationship between them) */
/* Pseudo-class selectors (select elements based on a certain state) */
/* Pseudo-elements selectors (select and style a part of an element) */
/* Attribute selectors (select elements based on an attribute or attribute value) */
.task .actions .edit {
	color: #3486f8;
}

.task .actions .delete {
	color: red;
}